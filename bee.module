<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_form_alter().
 */
function bee_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_type_edit_form' || $form_id == 'node_type_add_form') {
    if (\Drupal::currentUser()->hasPermission('administer bee settings')) {
      $node_type = $form_state->getFormObject()->getEntity();

      $bee_settings = \Drupal::config('node.type.' . $node_type->id())->get('bee');

      $form['bee'] = [
        '#type' => 'details',
        '#title' => t('BEE'),
        '#group' => 'additional_settings',
        '#tree' => TRUE,
      ];
      $form['bee']['bookable'] = [
        '#type' => 'checkbox',
        '#title' => t('Make this entity type bookable'),
        '#default_value' => isset($bee_settings['bookable']) ? $bee_settings['bookable'] : 0,
      ];
      $form['bee']['bookable_type'] = [
        '#type' => 'container',
        'radios' => [
          '#type' => 'radios',
          '#options' => [
            'daily' => t('Daily Bookings'),
            'hourly' => t('Hourly Bookings'),
          ],
          '#default_value' => isset($bee_settings['bookable_type']) ? $bee_settings['bookable_type'] : 'daily',
        ],
        '#states' => [
          'visible' => [
            ':input[name="bee[bookable]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      if (isset($bee_settings['type_id'])) {
        $form['bee']['type_id'] = [
          '#type' => 'hidden',
          '#value' => $bee_settings['type_id'],
        ];
      }

      $form['actions']['submit']['#submit'][] = 'bee_node_type_edit_form_submit';
    }
  }
}

/**
 * Custom submit function for the node_type_edit_form and node_type_add_form.
 */
function bee_node_type_edit_form_submit(array &$form, FormStateInterface $form_state) {
  $node_type = $form_state->getFormObject()->getEntity();

  $bee_settings = $form_state->getValue('bee');

  $bee_settings['bookable_type'] = $bee_settings['bookable_type']['radios'];

  if ($bee_settings['bookable']) {
    $field_name = 'field_availability_' . $bee_settings['bookable_type'];

    $field_storage = FieldStorageConfig::loadByName('node', $field_name);
    $field = FieldConfig::loadByName('node', $node_type->id(), $field_name);

    if (empty($field_storage)) {
      $field_storage = FieldStorageConfig::create([
        'field_name' => $field_name,
        'entity_type' => 'node',
        'type' => 'entity_reference',
        'cardinality' => 1,
        'locked' => 1,
        'settings' => [
          'target_type' => 'bat_unit',
        ],
      ]);
      $field_storage->save();
    }

    if (empty($field)) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'entity_type' => 'node',
        'label' => 'Availability',
        'bundle' => $node_type->id(),
        'required' => FALSE,
        'settings' => [
          'handler' => 'default',
          'handler_settings' => [],
        ],
      ]);
      $field->save();
    }

    if (!isset($bee_settings['type_id'])) {
      $bat_type = bat_type_create(
        [
          'name' => $node_type->label(),
          'type' => $bee_settings['bookable_type'],
        ]
      );

      $state = bat_event_load_state_by_machine_name('bee_' . $bee_settings['bookable_type'] . '_available');
      $bat_type->set('field_availability_' . $bee_settings['bookable_type'], $state->id());

      bat_type_save($bat_type);

      $bee_settings['type_id'] = $bat_type->id();
    }
  }

  \Drupal::configFactory()->getEditable('node.type.' . $node_type->id())->set('bee', $bee_settings)->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function bee_node_insert(EntityInterface $node) {
  $bee_settings = \Drupal::config('node.type.' . $node->bundle())->get('bee');

  if (isset($bee_settings['bookable']) && $bee_settings['bookable']) {
    $bat_unit = bat_unit_create(
      [
        'name' => $node->label(),
        'type' => 'default',
        'unit_type_id' => $bee_settings['type_id'],
      ]
    );
    bat_unit_save($bat_unit);

    $node->set('field_availability_daily', $bat_unit->id());
    $node->setNewRevision(FALSE);
    $node->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function bee_node_delete(EntityInterface $node) {
  if ($node->hasField('field_availability_daily')) {
    $bat_unit = $node->get('field_availability_daily')->entity;
    bat_unit_delete($bat_unit);
  }
}
