<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\office_hours\OfficeHoursDateHelper;

/**
 * Implements hook_form_alter().
 */
function bee_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_type_edit_form' || $form_id == 'node_type_add_form') {
    if (\Drupal::currentUser()->hasPermission('administer bee settings')) {
      $node_type = $form_state->getFormObject()->getEntity();

      $bee_settings = \Drupal::config('node.type.' . $node_type->id())->get('bee');

      $form['bee'] = [
        '#type' => 'details',
        '#title' => t('BEE'),
        '#group' => 'additional_settings',
        '#tree' => TRUE,
      ];
      $form['bee']['bookable'] = [
        '#type' => 'checkbox',
        '#title' => t('Make this entity type bookable'),
        '#default_value' => isset($bee_settings['bookable']) ? $bee_settings['bookable'] : 0,
      ];
      $form['bee']['bookable_type'] = [
        '#type' => 'container',
        'radios' => [
          '#type' => 'radios',
          '#options' => [
            'daily' => t('Daily Bookings'),
            'hourly' => t('Hourly Bookings'),
          ],
          '#default_value' => isset($bee_settings['bookable_type']) ? $bee_settings['bookable_type'] : 'daily',
        ],
        '#states' => [
          'visible' => [
            ':input[name="bee[bookable]"]' => ['checked' => TRUE],
          ],
        ],
      ];

      if (isset($bee_settings['type_id'])) {
        $form['bee']['type_id'] = [
          '#type' => 'hidden',
          '#value' => $bee_settings['type_id'],
        ];
      }

      $form['actions']['submit']['#submit'][] = 'bee_node_type_edit_form_submit';

      $form['#attached']['library'][] = 'bee/bee';
    }
  }
  elseif (preg_match('/^node_.*_edit_form$/', $form_id)) {
    $node = $form_state->getFormObject()->getEntity();

    $bee_settings = \Drupal::config('node.type.' . $node->bundle())->get('bee');

    if (isset($bee_settings['bookable']) && $bee_settings['bookable']) {
      $units_count = count($node->get('field_availability_' . $bee_settings['bookable_type'])->getValue());

      $form['bee'] = [
        '#type' => 'details',
        '#title' => t('BEE'),
        '#tree' => TRUE,
        '#prefix' => '<div id="bee-node-wrapper">',
        '#suffix' => '</div>',
        '#weight' => 9000,
      ];

      $form['bee']['units_count'] = [
        '#type' => 'item',
        '#title' => t('Number of referenced units'),
        '#markup' => $units_count,
        '#prefix' => '<div class="container-inline">',
        '#suffix' => '</div>',
        '#weight' => $form['field_open_hours']['#weight'] + 1,
      ];

      $form['bee']['number_units'] = [
        '#type' => 'number',
        '#title' => t('Number of units to add'),
        '#min' => 1,
        '#step' => 1,
        '#weight' => $form['field_open_hours']['#weight'] + 1,
      ];

      $form['bee']['add_more'] = [
        '#type' => 'submit',
        '#value' => t('Add units'),
        '#limit_validation_errors' => [
          ['bee', 'number_units'],
          ['changed'],
        ],
        '#submit' => ['bee_node_add_more_units_submit'],
        '#ajax' => [
          'callback' => 'bee_node_add_more_units_ajax_callback',
          'wrapper' => 'bee-node-wrapper',
        ],
        '#weight' => $form['field_open_hours']['#weight'] + 1,
      ];

      if ($bee_settings['bookable_type'] == 'hourly') {
        $form['field_use_open_hours']['#group'] = 'bee';
        $form['field_use_open_hours']['#weight'] = $form['field_open_hours']['#weight'] - 1;

        $form['field_open_hours']['#group'] = 'bee';
        $form['field_open_hours']['#states'] = [
          'visible' => [
            ':input[name="field_use_open_hours[value]"]' => ['checked' => TRUE],
          ],
        ];
      }
      else {
        $form['field_use_open_hours']['#access'] = FALSE;
        $form['field_open_hours']['#access'] = FALSE;
      }
    }
    else {
      if (isset($form['field_use_open_hours'])) {
        $form['field_use_open_hours']['#access'] = FALSE;
      }

      if (isset($form['field_open_hours'])) {
        $form['field_open_hours']['#access'] = FALSE;
      }
    }
  }
  elseif (preg_match('/^node_.*_form$/', $form_id)) {
    if (isset($form['field_use_open_hours'])) {
      $form['field_use_open_hours']['#access'] = FALSE;
    }

    if (isset($form['field_open_hours'])) {
      $form['field_open_hours']['#access'] = FALSE;
    }
  }
}

/**
 * Submit function for the "Add units" button.
 */
function bee_node_add_more_units_submit($form, FormStateInterface $form_state) {
  $number_units = $form_state->getValue(['bee', 'number_units']);

  if (is_numeric($number_units) && $number_units > 0) {
    $node = $form_state->getFormObject()->getEntity();

    $bee_settings = \Drupal::config('node.type.' . $node->bundle())->get('bee');

    $units_ids = $node->get('field_availability_' . $bee_settings['bookable_type'])->getValue();

    for ($i = 0; $i < $number_units; $i++) {
      $bat_unit = bat_unit_create(
        [
          'name' => $node->label() . ' ' . (count($units_ids) + 1),
          'type' => 'default',
          'unit_type_id' => $bee_settings['type_id'],
        ]
      );
      bat_unit_save($bat_unit);

      $units_ids[]['target_id'] = $bat_unit->id();
    }

    $node->set('field_availability_' . $bee_settings['bookable_type'], $units_ids);
    $node->changed_time = $form_state->getValue('changed');
    $node->setNewRevision(FALSE);
    $node->save();

    $units_count = count($node->get('field_availability_' . $bee_settings['bookable_type'])->getValue());

    $form['bee']['units_count']['#markup'] = $units_count;

    $form['bee']['number_units']['#value'] = '';

    drupal_set_message(t('@number Units added.', ['@number' => $number_units]));
  }
  elseif ($number_units === '') {
    drupal_set_message(t('Number of units is required.'), 'error');
  }
  else {
    drupal_set_message(t('Number of units must be a positive integer.'), 'error');
  }

  $form['bee']['#open'] = TRUE;
}

/**
 * Ajax callback for the "Add units" button.
 */
function bee_node_add_more_units_ajax_callback($form, FormStateInterface $form_state) {
  return $form['bee'];
}

/**
 * Custom submit function for the node_type_edit_form and node_type_add_form.
 */
function bee_node_type_edit_form_submit(array &$form, FormStateInterface $form_state) {
  $node_type = $form_state->getFormObject()->getEntity();

  $bee_settings = $form_state->getValue('bee');

  $bee_settings['bookable_type'] = $bee_settings['bookable_type']['radios'];

  if ($bee_settings['bookable']) {
    bee_add_use_open_hours_field('field_use_open_hours', $node_type);
    bee_add_open_hours_field('field_open_hours', $node_type);

    bee_add_availability_field('field_availability_' . $bee_settings['bookable_type'], $node_type);

    $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.' . $node_type->id() . '.default');
    $view_display->setComponent('field_availability_' . $bee_settings['bookable_type'], [
      'type' => 'entity_reference_entity_view',
      'region' => 'content',
      'label' => 'above',
      'settings' => [
        'view_mode' => $bee_settings['bookable_type'] . '_calendar',
      ],
    ]);
    $view_display->save();

    if (!isset($bee_settings['type_id'])) {
      $bat_type = bat_type_create(
        [
          'name' => $node_type->label(),
          'type' => $bee_settings['bookable_type'],
        ]
      );

      $state = bat_event_load_state_by_machine_name('bee_' . $bee_settings['bookable_type'] . '_available');
      $bat_type->set('field_availability_' . $bee_settings['bookable_type'], $state->id());

      bat_type_save($bat_type);

      $bee_settings['type_id'] = $bat_type->id();
    }

    \Drupal::configFactory()->getEditable('node.type.' . $node_type->id())->set('bee', $bee_settings)->save();
  }
  else {
    if (isset($bee_settings['type_id'])) {
      $node_storage = \Drupal::entityManager()->getStorage('node');

      $query = \Drupal::entityQuery('node')
        ->condition('type', $node_type->id());

      $nids = $query->execute();
      foreach ($node_storage->loadMultiple($nids) as $node) {
        if ($node->hasField('field_availability_' . $bee_settings['bookable_type'])) {
          if ($bat_unit = $node->get('field_availability_' . $bee_settings['bookable_type'])->entity) {
            bat_unit_delete($bat_unit);
          }
        }
      }

      $bat_type = bat_type_load($bee_settings['type_id']);
      $bat_type->delete();
    }

    \Drupal::configFactory()->getEditable('node.type.' . $node_type->id())->clear('bee')->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function bee_node_presave(EntityInterface $node) {
  if (isset($node->changed_time)) {
    $node->setChangedTime($node->changed_time);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function bee_node_insert(EntityInterface $node) {
  $bee_settings = \Drupal::config('node.type.' . $node->bundle())->get('bee');

  if (isset($bee_settings['bookable']) && $bee_settings['bookable']) {
    $bat_unit = bat_unit_create(
      [
        'name' => $node->label() . ' 1',
        'type' => 'default',
        'unit_type_id' => $bee_settings['type_id'],
      ]
    );
    bat_unit_save($bat_unit);

    $node->set('field_availability_' . $bee_settings['bookable_type'], $bat_unit->id());
    $node->setNewRevision(FALSE);
    $node->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function bee_node_delete(EntityInterface $node) {
  $bee_settings = \Drupal::config('node.type.' . $node->bundle())->get('bee');

  if ($node->hasField('field_availability_' . $bee_settings['bookable_type'])) {
    if ($bat_unit = $node->get('field_availability_' . $bee_settings['bookable_type'])->entity) {
      bat_unit_delete($bat_unit);
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function bee_theme_registry_alter(&$theme_registry) {
  $theme_registry['field__node__field_availability_hourly'] = [
    'template' => 'field-availability-hourly',
    'path' => drupal_get_path('module', 'bee') . '/templates',
    'render element' => 'element',
    'base hook' => 'field',
    'type' => 'module',
    'theme path' => drupal_get_path('module', 'bee'),
    'preprocess functions' => [
      'template_preprocess',
      'template_preprocess_field',
    ],
  ];

  $theme_registry['field__node__field_availability_daily'] = [
    'template' => 'field-availability-daily',
    'path' => drupal_get_path('module', 'bee') . '/templates',
    'render element' => 'element',
    'base hook' => 'field',
    'type' => 'module',
    'theme path' => drupal_get_path('module', 'bee'),
    'preprocess functions' => [
      'template_preprocess',
      'template_preprocess_field',
    ],
  ];
}

/**
 * Implements hook_entity_view_display_alter().
 */
function bee_entity_view_display_alter(EntityViewDisplayInterface $display, $context) {
  if ($context['entity_type'] == 'node') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      if ($display->getComponent('field_open_hours')) {
        if (!($node->get('field_use_open_hours')->value)) {
          $display->removeComponent('field_open_hours');
        }
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function bee_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == 'bat_unit') {
    if ($display->id() == 'bat_unit.default.daily_calendar' || $display->id() == 'bat_unit.default.hourly_calendar') {
      $bat_type = $entity->get('unit_type_id')->entity;

      $unit_type = $bat_type->id();

      $node = $build['#bat_unit']->_referringItem->getEntity();

      $units_ids = [];
      foreach ($node->get('field_availability_' . $bat_type->bundle()) as $unit) {
        $units_ids[] = $unit->entity->id();
      }

      if ($bat_type->bundle() == 'daily') {
        $event_type = 'availability_daily';
        $event_granularity = 'bat_daily';

        $fc_user_settings = [
          'batCalendar' => [
            [
              'unitType' => $unit_type,
              'unitIds' => implode(',', $units_ids),
              'eventType' => $event_type,
              'eventGranularity' => $event_granularity,
              'editable' => FALSE,
              'selectable' => FALSE,
              'defaultView' => 'month',
              'views' => 'month',
              'headerLeft' => 'today',
              'headerCenter' => 'title',
              'headerRight' => 'prev, next',
              'resourceLabelText' => ' ',
              'background' => 'hide-book',
            ],
          ],
        ];
      }
      else {
        if ($node->get('field_use_open_hours')) {
          $business_hours = [];

          foreach ($node->get('field_open_hours')->getValue() as $value) {
            $business_hours[] = [
              'dow' => [$value['day']],
              'start' => OfficeHoursDateHelper::format($value['starthours'], 'H:i'),
              'end' => OfficeHoursDateHelper::format($value['endhours'], 'H:i'),
            ];
          }
        }
        else {
          $business_hours = [
            'start' => '00:00',
            'end' => '24:00',
            'dow' => [0, 1, 2, 3, 4, 5, 6],
          ];
        }

        $event_type = 'availability_hourly';
        $event_granularity = 'bat_hourly';

        $fc_user_settings = [
          'batCalendar' => [
            [
              'unitType' => $unit_type,
              'unitIds' => implode(',', $units_ids),
              'eventType' => $event_type,
              'eventGranularity' => $event_granularity,
              'editable' => FALSE,
              'selectable' => FALSE,
              'defaultView' => 'timelineDay',
              'views' => 'timelineDay',
              'viewsTimelineDaySlotDuration' => '01:00',
              'headerLeft' => 'today',
              'headerCenter' => 'title',
              'headerRight' => 'prev, next',
              'resourceLabelText' => ' ',
              'background' => 'hide-book',
              'businessHours' => $business_hours,
            ],
          ],
        ];
      }

      $calendar_settings['user_settings'] = $fc_user_settings;
      $calendar_settings['calendar_id'] = 'fullcalendar-scheduler';

      $render_array = [
        'calendar' => [
          '#theme' => 'bat_fullcalendar',
          '#calendar_settings' => $calendar_settings,
          '#attached' => ['library' => ['bat_event_ui/bat_event_ui', 'bat_fullcalendar/bat-fullcalendar-scheduler']],
        ],
      ];

      $build = [
        '#markup' => render($render_array),
      ];
    }
  }
}

/**
 * Implements hook_bat_api_events_index_calendar_alter().
 */
function bee_bat_api_events_index_calendar_alter(&$events, $context) {
  if ($context['background'] == 'hide-book') {
    foreach ($events as $id => $event) {
      if ($event['type'] == 'availability_daily' || $event['type'] == 'availability_hourly') {
        unset($events[$id]['rendering']);

        if ($event['blocking']) {
          if ($event['type'] == 'availability_daily') {
            $state = bat_event_load_state_by_machine_name('bee_daily_not_available');
          }
          else {
            $state = bat_event_load_state_by_machine_name('bee_hourly_not_available');
          }

          $events[$id]['color'] = $state->getColor();
          $events[$id]['title'] = $state->getCalendarLabel();
        }

        $start_date = new DateTime($event['start']);
        $end_date = new DateTime($event['end']);

        if ($start_date->format('Y-m-d') != $end_date->format('Y-m-d')) {
          $events[$id]['end'] = $end_date->add(new DateInterval('P1D'))->format('Y-m-d') . 'T00:00:00';
        }
      }
    }
  }
}

/**
 * @param $field_name
 * @param $node_type
 */
function bee_add_availability_field($field_name, $node_type) {
  $field_storage = FieldStorageConfig::loadByName('node', $field_name);
  $field = FieldConfig::loadByName('node', $node_type->id(), $field_name);

  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'cardinality' => -1,
      'locked' => 1,
      'settings' => [
        'target_type' => 'bat_unit',
      ],
    ]);
    $field_storage->save();
  }

  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'entity_type' => 'node',
      'label' => 'Availability',
      'bundle' => $node_type->id(),
      'required' => FALSE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
    ]);
    $field->save();
  }
}

/**
 * @param $field_name
 * @param $node_type
 */
function bee_add_open_hours_field($field_name, $node_type) {
  $field_storage = FieldStorageConfig::loadByName('node', $field_name);
  $field = FieldConfig::loadByName('node', $node_type->id(), $field_name);

  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'office_hours',
      'cardinality' => -1,
      'locked' => 1,
      'settings' => [
        'cardinality_per_day' => 2,
        'time_format' => 'G',
        'element_type' => 'office_hours_datetime',
        'increment' => 60,
        'comment' => FALSE,
        'valhrs' => FALSE,
        'limit_start' => '',
        'limit_end' => '',
      ],
    ]);
    $field_storage->save();
  }

  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'entity_type' => 'node',
      'label' => 'Open Hours',
      'bundle' => $node_type->id(),
      'required' => FALSE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
    ]);
    $field->save();

    $form_display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.' . $node_type->id() . '.default');
    $form_display->setComponent($field_name, [
      'type' => 'office_hours_default',
      'weight' => 3,
    ]);
    $form_display->save();

    $view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.' . $node_type->id() . '.default');
    $view_display->setComponent($field_name, [
      'type' => 'office_hours_table',
      'region' => 'content',
      'label' => 'above',
      'settings' => [],
    ]);
    $view_display->save();
  }
}

/**
 * @param $field_name
 * @param $node_type
 */
function bee_add_use_open_hours_field($field_name, $node_type) {
  $field_storage = FieldStorageConfig::loadByName('node', $field_name);
  $field = FieldConfig::loadByName('node', $node_type->id(), $field_name);

  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'boolean',
      'cardinality' => 1,
      'locked' => 1,
      'settings' => [],
    ]);
    $field_storage->save();
  }

  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'entity_type' => 'node',
      'label' => 'Set Open Hours',
      'bundle' => $node_type->id(),
      'required' => FALSE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
    ]);
    $field->save();

    $form_display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.' . $node_type->id() . '.default');
    $form_display->setComponent($field_name, [
      'type' => 'boolean_checkbox',
      'weight' => 2,
    ]);
    $form_display->save();
  }
}
